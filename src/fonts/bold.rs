// DO NOT MAKE EDITS HERE because this file is automatically generated.
// To make changes, see blitstr/codegen/main.go
//
// Copyright (c) 2020 Sam Blenny
// SPDX-License-Identifier: Apache-2.0 OR MIT
//
// NOTE: The copyright notice above applies to the rust source code in this
// file, but not to the bitmap graphics encoded in the DATA array (see credits).
//
// CREDITS:
// This code includes encoded bitmaps of glyphs from the Chicago typeface which
// was designed by Susan Kare and released by Apple in 1984. Chicago is a
// registered trademark of Apple Inc.
//
//! Bold Font
#![forbid(unsafe_code)]
#![allow(dead_code)]

use super::{GlyphData, NoGlyphErr};

/// Maximum height of glyph patterns in this bitmap typeface.
/// This will be true: h + y_offset <= MAX_HEIGHT
pub const MAX_HEIGHT: u8 = 30;

/// Seed for Murmur3 hashes in the HASH_* index arrays
pub const M3_SEED: u32 = 0;

/// Return Okay(offset into DATA[]) for start of blit pattern for grapheme cluster.
///
/// Before doing an expensive lookup for the whole cluster, this does a pre-filter
/// check to see whether the first character falls into one of the codepoint ranges
/// for Unicode blocks included in this font.
///
/// Returns: Result<(blit pattern offset into DATA, bytes of cluster used by match)>
pub fn get_blit_pattern_offset(cluster: &str) -> Result<(GlyphData, usize), NoGlyphErr> {
    let first_char: u32;
    match cluster.chars().next() {
        Some(c) => first_char = c as u32,
        None => return Err(NoGlyphErr),
    }
    return match first_char {
        0x0..=0x7F => {
            if let Some((offset, bytes_used)) = find_basic_latin(cluster, 2) {
                Ok((GlyphData::Bold(offset), bytes_used))
            } else if let Some((offset, bytes_used)) = find_basic_latin(cluster, 1) {
                Ok((GlyphData::Bold(offset), bytes_used))
            } else {
                Err(NoGlyphErr)
            }
        }
        0x80..=0xFF => {
            if let Some((offset, bytes_used)) = find_latin_1_supplement(cluster, 1) {
                Ok((GlyphData::Bold(offset), bytes_used))
            } else {
                Err(NoGlyphErr)
            }
        }
        0x100..=0x17F => {
            if let Some((offset, bytes_used)) = find_latin_extended_a(cluster, 1) {
                Ok((GlyphData::Bold(offset), bytes_used))
            } else {
                Err(NoGlyphErr)
            }
        }
        0x2000..=0x206F => {
            if let Some((offset, bytes_used)) = find_general_punctuation(cluster, 1) {
                Ok((GlyphData::Bold(offset), bytes_used))
            } else {
                Err(NoGlyphErr)
            }
        }
        0x20A0..=0x20CF => {
            if let Some((offset, bytes_used)) = find_currency_symbols(cluster, 1) {
                Ok((GlyphData::Bold(offset), bytes_used))
            } else {
                Err(NoGlyphErr)
            }
        }
        0xFFF0..=0xFFFF => {
            if let Some((offset, bytes_used)) = find_specials(cluster, 1) {
                Ok((GlyphData::Bold(offset), bytes_used))
            } else {
                Err(NoGlyphErr)
            }
        }
        _ => Err(super::NoGlyphErr),
    };
}

/// Use binary search on table of grapheme cluster hashes to find blit pattern for grapheme cluster.
/// Only attempt to match grapheme clusters of length limit codepoints.
fn find_basic_latin(cluster: &str, limit: u32) -> Option<(usize, usize)> {
    let (key, bytes_hashed) = super::murmur3(cluster, M3_SEED, limit);
    match HASH_BASIC_LATIN.binary_search(&key) {
        Ok(index) => return Some((OFFSET_BASIC_LATIN[index], bytes_hashed)),
        _ => None,
    }
}

/// Index of murmur3(grapheme cluster); sort matches OFFSET_BASIC_LATIN
const HASH_BASIC_LATIN: [u32; 148] = [
    0x0323CD4F,  // "ë" 65-308
    0x049BF55E,  // "}"
    0x0537C05E,  // "È" 45-300
    0x0B9EA876,  // "8"
    0x0D4E2B64,  // "è" 65-300
    0x11DDB5BC,  // "Ù" 55-300
    0x129F2A7F,  // "ã" 61-303
    0x13156136,  // "F"
    0x131AB870,  // "O"
    0x1403A883,  // "Ê" 45-302
    0x1586C0AA,  // "j"
    0x1672836B,  // "`"
    0x16F9A05F,  // "#"
    0x18D53BB6,  // "("
    0x198B90FC,  // "ù" 75-300
    0x1BF82D35,  // "y"
    0x1C40E42F,  // "Ö" 4F-308
    0x1CFCD293,  // ")"
    0x1F2B17F3,  // "Î" 49-302
    0x1F79A4D0,  // "$"
    0x21840E11,  // "q"
    0x22ABE92F,  // "K"
    0x2379B646,  // "Õ" 4F-303
    0x24189EC6,  // "ä" 61-308
    0x259E68D3,  // "6"
    0x26FF6E36,  // "3"
    0x2A3184F1,  // "U"
    0x2B038801,  // "a"
    0x2C17F13B,  // "r"
    0x2D2269F8,  // "m"
    0x30F856B5,  // "Â" 41-302
    0x31099644,  // "t"
    0x315F5687,  // "I"
    0x3673CB35,  // "{"
    0x39BC06BB,  // "L"
    0x435F26F6,  // "Ñ" 4E-303
    0x43603571,  // "C"
    0x44C216BA,  // "R"
    0x455E0578,  // "Ü" 55-308
    0x45EF573F,  // ";"
    0x465D3B9D,  // "í" 69-301
    0x47EF8034,  // "ÿ" 79-308
    0x4938EA00,  // "7"
    0x4AB0FC13,  // "4"
    0x4BCD3197,  // "A"
    0x4CC5A899,  // "|"
    0x524C4F7E,  // "B"
    0x52D3CB36,  // "%"
    0x55C7F2AE,  // "ý" 79-301
    0x56DEE618,  // "v"
    0x5A352E5E,  // "c"
    0x5B06F60A,  // "1"
    0x5C904E6C,  // "_"
    0x5CA0F32F,  // "&"
    0x5FF80125,  // "S"
    0x61901224,  // "5"
    0x67BD451E,  // "ñ" 6E-303
    0x681839B8,  // "Ò" 4F-300
    0x68E75BE7,  // "@"
    0x6C058218,  // "Û" 55-302
    0x6E85A379,  // "x"
    0x72DE1EFB,  // "*"
    0x73688484,  // "p"
    0x7627CA6C,  // "D"
    0x779CDA2E,  // "Y"
    0x7834A19C,  // "ó" 6F-301
    0x78FD8C32,  // "u"
    0x7A435EEE,  // "Ï" 49-308
    0x7B6B1369,  // "9"
    0x7BA23029,  // "J"
    0x7F4EBF76,  // "Ç" 43-327
    0x803AF153,  // "["
    0x804744C4,  // "e"
    0x84510F7D,  // "o"
    0x8499B628,  // "å" 61-30A
    0x86A8B043,  // ","
    0x8B86BA97,  // "="
    0x8C1A54EE,  // "g"
    0x8C69C315,  // " "
    0x8C94654B,  // "ê" 65-302
    0x8DB20A6B,  // "!"
    0x933CEC52,  // "Ä" 41-308
    0x9500C437,  // "<"
    0x9582C02E,  // "G"
    0x98453FD6,  // "?"
    0x98C6B546,  // "ü" 75-308
    0x99933C47,  // "w"
    0x9B44CABE,  // "á" 61-301
    0x9DD6D1DF,  // "â" 61-302
    0x9F99932F,  // "À" 41-300
    0xA03D6D22,  // "Å" 41-30A
    0xA13B361A,  // "/"
    0xA1A410C7,  // "2"
    0xA26A0E29,  // "Ã" 41-303
    0xA30CAD6B,  // "û" 75-302
    0xA5872342,  // "k"
    0xA891E88A,  // "0"
    0xABE208D0,  // "P"
    0xADABEA12,  // "d"
    0xADC91A24,  // "ç" 63-327
    0xAE495307,  // "õ" 6F-303
    0xAF41DB71,  // "]"
    0xB12BF2EE,  // "V"
    0xB35F1351,  // "E"
    0xB454A383,  // "ú" 75-301
    0xB5097BAB,  // "ö" 6F-308
    0xB8ED6BE2,  // "X"
    0xBE856396,  // "ì" 69-300
    0xBFE47D0D,  // "Q"
    0xC06E932F,  // "T"
    0xC0AFD8ED,  // "Ô" 4F-302
    0xC1209A73,  // "f"
    0xC2DDC575,  // "\""
    0xC3AB3492,  // "ò" 6F-300
    0xC57A2C66,  // "Ó" 4F-301
    0xC5E4D96B,  // "î" 69-302
    0xC890E3DD,  // ">"
    0xC99309A2,  // "-"
    0xC9BEA311,  // "Z"
    0xCAECCF17,  // "s"
    0xCAF83468,  // "H"
    0xCB07FD3E,  // "'"
    0xCB7242E0,  // "+"
    0xCD3FDBE3,  // "M"
    0xCE94AE25,  // "b"
    0xD363E17B,  // "à" 61-300
    0xD4FFA898,  // ":"
    0xD7B03F23,  // "z"
    0xD822B857,  // "Ì" 49-300
    0xDA2B151D,  // "\\"
    0xDB01AF22,  // "n"
    0xDC135ABD,  // "N"
    0xE2AA1EBB,  // "."
    0xE5CA55BF,  // "i"
    0xE6556D01,  // "h"
    0xE7C19BA9,  // "é" 65-301
    0xED67FA54,  // "Ý" 59-301
    0xEF026B52,  // "l"
    0xEF302693,  // "Í" 49-301
    0xF04B9422,  // "Ú" 55-301
    0xF0F19A38,  // "~"
    0xF29AB82D,  // "W"
    0xF31D8BFB,  // "ï" 69-308
    0xF3A5A351,  // "Á" 41-301
    0xF3BF2609,  // "É" 45-301
    0xF85223EB,  // "Ë" 45-308
    0xFC2C2430,  // "^"
    0xFFF1D70C,  // "ô" 6F-302
];

/// Lookup table of blit pattern offsets; sort matches HASH_BASIC_LATIN
const OFFSET_BASIC_LATIN: [usize; 148] = [
    1253, // "ë" 65-308
    650,  // "}"
    940,  // "È" 45-300
    150,  // "8"
    1226, // "è" 65-300
    1085, // "Ù" 55-300
    1180, // "ã" 61-303
    246,  // "F"
    321,  // "O"
    958,  // "Ê" 45-302
    515,  // "j"
    448,  // "`"
    9,    // "#"
    51,   // "("
    1355, // "ù" 75-300
    625,  // "y"
    1058, // "Ö" 4F-308
    57,   // ")"
    983,  // "Î" 49-302
    18,   // "$"
    568,  // "q"
    283,  // "K"
    1048, // "Õ" 4F-303
    1189, // "ä" 61-308
    134,  // "6"
    109,  // "3"
    370,  // "U"
    451,  // "a"
    576,  // "r"
    536,  // "m"
    878,  // "Â" 41-302
    588,  // "t"
    269,  // "I"
    641,  // "{"
    292,  // "L"
    1006, // "Ñ" 4E-303
    223,  // "C"
    347,  // "R"
    1115, // "Ü" 55-308
    169,  // ";"
    1265, // "í" 69-301
    1411, // "ÿ" 79-308
    142,  // "7"
    117,  // "4"
    207,  // "A"
    647,  // "|"
    215,  // "B"
    26,   // "%"
    1390, // "ý" 79-301
    601,  // "v"
    466,  // "c"
    95,   // "1"
    446,  // "_"
    39,   // "&"
    355,  // "S"
    126,  // "5"
    1289, // "ñ" 6E-303
    1018, // "Ò" 4F-300
    197,  // "@"
    1105, // "Û" 55-302
    618,  // "x"
    63,   // "*"
    560,  // "p"
    231,  // "D"
    407,  // "Y"
    1307, // "ó" 6F-301
    594,  // "u"
    990,  // "Ï" 49-308
    158,  // "9"
    275,  // "J"
    930,  // "Ç" 43-327
    423,  // "["
    480,  // "e"
    553,  // "o"
    1197, // "å" 61-30A
    73,   // ","
    179,  // "="
    494,  // "g"
    0,    // " "
    1244, // "ê" 65-302
    2,    // "!"
    898,  // "Ä" 41-308
    173,  // "<"
    253,  // "G"
    189,  // "?"
    1382, // "ü" 75-308
    608,  // "w"
    1162, // "á" 61-301
    1171, // "â" 61-302
    858,  // "À" 41-300
    908,  // "Å" 41-30A
    79,   // "/"
    101,  // "2"
    888,  // "Ã" 41-303
    1373, // "û" 75-302
    524,  // "k"
    87,   // "0"
    329,  // "P"
    472,  // "d"
    1217, // "ç" 63-327
    1325, // "õ" 6F-303
    437,  // "]"
    378,  // "V"
    239,  // "E"
    1364, // "ú" 75-301
    1334, // "ö" 6F-308
    399,  // "X"
    1261, // "ì" 69-300
    337,  // "Q"
    362,  // "T"
    1038, // "Ô" 4F-302
    487,  // "f"
    6,    // "\""
    1298, // "ò" 6F-300
    1028, // "Ó" 4F-301
    1269, // "î" 69-302
    183,  // ">"
    75,   // "-"
    415,  // "Z"
    582,  // "s"
    261,  // "H"
    49,   // "'"
    68,   // "+"
    299,  // "M"
    458,  // "b"
    1153, // "à" 61-300
    166,  // ":"
    634,  // "z"
    975,  // "Ì" 49-300
    429,  // "\\"
    546,  // "n"
    312,  // "N"
    77,   // "."
    511,  // "i"
    503,  // "h"
    1235, // "é" 65-301
    1125, // "Ý" 59-301
    532,  // "l"
    979,  // "Í" 49-301
    1095, // "Ú" 55-301
    656,  // "~"
    386,  // "W"
    1275, // "ï" 69-308
    868,  // "Á" 41-301
    949,  // "É" 45-301
    967,  // "Ë" 45-308
    443,  // "^"
    1316, // "ô" 6F-302
];

/// Use binary search on table of grapheme cluster hashes to find blit pattern for grapheme cluster.
/// Only attempt to match grapheme clusters of length limit codepoints.
fn find_latin_1_supplement(cluster: &str, limit: u32) -> Option<(usize, usize)> {
    let (key, bytes_hashed) = super::murmur3(cluster, M3_SEED, limit);
    match HASH_LATIN_1_SUPPLEMENT.binary_search(&key) {
        Ok(index) => return Some((OFFSET_LATIN_1_SUPPLEMENT[index], bytes_hashed)),
        _ => None,
    }
}

/// Index of murmur3(grapheme cluster); sort matches OFFSET_LATIN_1_SUPPLEMENT
const HASH_LATIN_1_SUPPLEMENT: [u32; 96] = [
    0x00EAC56E,  // "°"
    0x0254FD66,  // "®"
    0x056DE9E6,  // "Î"
    0x06FE368D,  // "Ö"
    0x137E3259,  // "Õ"
    0x18E6F281,  // "à"
    0x1A5A66CD,  // "ø"
    0x1B0DE252,  // "¢"
    0x1B43C661,  // "¤"
    0x1C505947,  // "í"
    0x252158D3,  // "¥"
    0x25872B22,  // "ë"
    0x259437AC,  // "§"
    0x268B196D,  // "ä"
    0x275E5021,  // "¨"
    0x2766361E,  // "Ú"
    0x278A377A,  // "Ì"
    0x28CA6AD7,  // "Ø"
    0x291E971E,  // "Ï"
    0x3280724D,  // "»"
    0x36953E7B,  // "õ"
    0x388FB155,  // "ï"
    0x39056A43,  // "É"
    0x3A073FBE,  // "È"
    0x3AE00F65,  // "ü"
    0x3E168B4D,  // "ó"
    0x3E82329E,  // "û"
    0x402DCFF6,  // "×"
    0x4236CDD1,  // "¾"
    0x44D0C2C4,  // "ê"
    0x450DB83D,  // "Û"
    0x4F92356C,  // "µ"
    0x511BCA1D,  // "á"
    0x554A5349,  // "Æ"
    0x5E39BCEE,  // "´"
    0x5EB9D2A0,  // "ç"
    0x5EE10367,  // "ò"
    0x62D494F4,  // "Ý"
    0x6984AA2D,  // "Í"
    0x6BA96CC3,  // "Ü"
    0x6E3C05CF,  // "ý"
    0x6EF8ED06,  // "\u00AD" Soft Hyphen
    0x6FA3C127,  // "ã"
    0x71EE15F2,  // "Ò"
    0x7619D892,  // "ª"
    0x76554D10,  // "Ç"
    0x79026F8E,  // "Å"
    0x7E2A203C,  // "÷"
    0x839D40CB,  // "£"
    0x84FF8F94,  // "Ô"
    0x8AE0A2B9,  // "å"
    0x8D741045,  // "Þ"
    0x8EA3F31F,  // "³"
    0x9194CCB5,  // "¬"
    0x92979158,  // "ô"
    0x95C4DC63,  // "Ã"
    0x97A9C1DA,  // "¶"
    0x97C63B05,  // "\u00A0" No-Break Space
    0xA10C8120,  // "·"
    0xA5F3368B,  // "¹"
    0xA7883CA5,  // "¸"
    0xA7B0FE42,  // "©"
    0xABF561B2,  // "«"
    0xAD97621D,  // "Ð"
    0xB1A64F1E,  // "Â"
    0xB1BF38B8,  // "º"
    0xB55DA0FA,  // "î"
    0xB5CA05F5,  // "¦"
    0xB7001103,  // "¡"
    0xB9229669,  // "¿"
    0xBA8E9829,  // "Ä"
    0xBB608964,  // "ú"
    0xC0837C42,  // "¼"
    0xC0E7AB63,  // "¯"
    0xC20FE7B7,  // "þ"
    0xC6EF143E,  // "ß"
    0xC98BE718,  // "Á"
    0xCAD0511F,  // "é"
    0xCAF24984,  // "Ù"
    0xD040D3E3,  // "è"
    0xD4D6097A,  // "Ë"
    0xD83534E2,  // "Ñ"
    0xDD061C7A,  // "²"
    0xDE3FB757,  // "ì"
    0xE14F2E81,  // "â"
    0xE2532EDC,  // "ð"
    0xE51FF77C,  // "½"
    0xE5DA3FED,  // "±"
    0xE9131AA1,  // "ù"
    0xEBC8143D,  // "ö"
    0xEC99A516,  // "À"
    0xF446CD1A,  // "Ó"
    0xF520EF41,  // "æ"
    0xF64ED921,  // "ñ"
    0xFB89D3F4,  // "ÿ"
    0xFBFECC1C,  // "Ê"
];

/// Lookup table of blit pattern offsets; sort matches HASH_LATIN_1_SUPPLEMENT
const OFFSET_LATIN_1_SUPPLEMENT: [usize; 96] = [
    753,  // "°"
    741,  // "®"
    983,  // "Î"
    1058, // "Ö"
    1048, // "Õ"
    1153, // "à"
    1347, // "ø"
    665,  // "¢"
    680,  // "¤"
    1265, // "í"
    688,  // "¥"
    1253, // "ë"
    701,  // "§"
    1189, // "ä"
    710,  // "¨"
    1095, // "Ú"
    975,  // "Ì"
    1073, // "Ø"
    990,  // "Ï"
    803,  // "»"
    1325, // "õ"
    1275, // "ï"
    949,  // "É"
    940,  // "È"
    1382, // "ü"
    1307, // "ó"
    1373, // "û"
    1068, // "×"
    837,  // "¾"
    1244, // "ê"
    1105, // "Û"
    771,  // "µ"
    1162, // "á"
    918,  // "Æ"
    768,  // "´"
    1217, // "ç"
    1298, // "ò"
    1125, // "Ý"
    979,  // "Í"
    1115, // "Ü"
    1390, // "ý"
    739,  // "\u00AD" Soft Hyphen
    1180, // "ã"
    1018, // "Ò"
    722,  // "ª"
    930,  // "Ç"
    908,  // "Å"
    1342, // "÷"
    671,  // "£"
    1038, // "Ô"
    1197, // "å"
    1135, // "Þ"
    765,  // "³"
    736,  // "¬"
    1316, // "ô"
    888,  // "Ã"
    781,  // "¶"
    659,  // "\u00A0" No-Break Space
    790,  // "·"
    794,  // "¹"
    792,  // "¸"
    712,  // "©"
    728,  // "«"
    997,  // "Ð"
    878,  // "Â"
    797,  // "º"
    1269, // "î"
    698,  // "¦"
    661,  // "¡"
    850,  // "¿"
    898,  // "Ä"
    1364, // "ú"
    811,  // "¼"
    751,  // "¯"
    1401, // "þ"
    1144, // "ß"
    868,  // "Á"
    1235, // "é"
    1085, // "Ù"
    1226, // "è"
    967,  // "Ë"
    1006, // "Ñ"
    762,  // "²"
    1261, // "ì"
    1171, // "â"
    1281, // "ð"
    824,  // "½"
    756,  // "±"
    1355, // "ù"
    1334, // "ö"
    858,  // "À"
    1028, // "Ó"
    1207, // "æ"
    1289, // "ñ"
    1411, // "ÿ"
    958,  // "Ê"
];

/// Use binary search on table of grapheme cluster hashes to find blit pattern for grapheme cluster.
/// Only attempt to match grapheme clusters of length limit codepoints.
fn find_latin_extended_a(cluster: &str, limit: u32) -> Option<(usize, usize)> {
    let (key, bytes_hashed) = super::murmur3(cluster, M3_SEED, limit);
    match HASH_LATIN_EXTENDED_A.binary_search(&key) {
        Ok(index) => return Some((OFFSET_LATIN_EXTENDED_A[index], bytes_hashed)),
        _ => None,
    }
}

/// Index of murmur3(grapheme cluster); sort matches OFFSET_LATIN_EXTENDED_A
const HASH_LATIN_EXTENDED_A: [u32; 2] = [
    0x1A01594C,  // "Œ"
    0x8C60DA30,  // "œ"
];

/// Lookup table of blit pattern offsets; sort matches HASH_LATIN_EXTENDED_A
const OFFSET_LATIN_EXTENDED_A: [usize; 2] = [
    1421, // "Œ"
    1433, // "œ"
];

/// Use binary search on table of grapheme cluster hashes to find blit pattern for grapheme cluster.
/// Only attempt to match grapheme clusters of length limit codepoints.
fn find_general_punctuation(cluster: &str, limit: u32) -> Option<(usize, usize)> {
    let (key, bytes_hashed) = super::murmur3(cluster, M3_SEED, limit);
    match HASH_GENERAL_PUNCTUATION.binary_search(&key) {
        Ok(index) => return Some((OFFSET_GENERAL_PUNCTUATION[index], bytes_hashed)),
        _ => None,
    }
}

/// Index of murmur3(grapheme cluster); sort matches OFFSET_GENERAL_PUNCTUATION
const HASH_GENERAL_PUNCTUATION: [u32; 11] = [
    0x0D0042B1,  // "•"
    0x18E68A7D,  // "‚"
    0x372ED469,  // "“"
    0x3A3C25C2,  // "”"
    0x80E4E277,  // "‡"
    0x885E576B,  // "‟"
    0x8B80C01D,  // "‛"
    0x8F0BE1DB,  // "„"
    0x8F56D335,  // "†"
    0xA6C64F29,  // "‘"
    0xE29813B0,  // "’"
];

/// Lookup table of blit pattern offsets; sort matches HASH_GENERAL_PUNCTUATION
const OFFSET_GENERAL_PUNCTUATION: [usize; 11] = [
    1474, // "•"
    1447, // "‚"
    1451, // "“"
    1455, // "”"
    1470, // "‡"
    1463, // "‟"
    1449, // "‛"
    1459, // "„"
    1467, // "†"
    1443, // "‘"
    1445, // "’"
];

/// Use binary search on table of grapheme cluster hashes to find blit pattern for grapheme cluster.
/// Only attempt to match grapheme clusters of length limit codepoints.
fn find_currency_symbols(cluster: &str, limit: u32) -> Option<(usize, usize)> {
    let (key, bytes_hashed) = super::murmur3(cluster, M3_SEED, limit);
    match HASH_CURRENCY_SYMBOLS.binary_search(&key) {
        Ok(index) => return Some((OFFSET_CURRENCY_SYMBOLS[index], bytes_hashed)),
        _ => None,
    }
}

/// Index of murmur3(grapheme cluster); sort matches OFFSET_CURRENCY_SYMBOLS
const HASH_CURRENCY_SYMBOLS: [u32; 1] = [
    0x1ACA36BB,  // "€"
];

/// Lookup table of blit pattern offsets; sort matches HASH_CURRENCY_SYMBOLS
const OFFSET_CURRENCY_SYMBOLS: [usize; 1] = [
    1479, // "€"
];

/// Use binary search on table of grapheme cluster hashes to find blit pattern for grapheme cluster.
/// Only attempt to match grapheme clusters of length limit codepoints.
fn find_specials(cluster: &str, limit: u32) -> Option<(usize, usize)> {
    let (key, bytes_hashed) = super::murmur3(cluster, M3_SEED, limit);
    match HASH_SPECIALS.binary_search(&key) {
        Ok(index) => return Some((OFFSET_SPECIALS[index], bytes_hashed)),
        _ => None,
    }
}

/// Index of murmur3(grapheme cluster); sort matches OFFSET_SPECIALS
const HASH_SPECIALS: [u32; 1] = [
    0x58A5DA35,  // "�"
];

/// Lookup table of blit pattern offsets; sort matches HASH_SPECIALS
const OFFSET_SPECIALS: [usize; 1] = [
    1488, // "�"
];

#[cfg(any(target_os = "none", target_os = "xous"))]
pub(crate) static DATA_LOCATION: core::sync::atomic::AtomicU32 = core::sync::atomic::AtomicU32::new(0);
pub(crate) const DATA_LEN: usize = 1501;

#[cfg(not(any(target_os = "none", target_os = "xous")))]
/// Packed glyph pattern data.
/// Record format:
///  [offset+0]: ((w as u8) << 16) | ((h as u8) << 8) | (yOffset as u8)
///  [offset+1..=ceil(w*h/32)]: packed 1-bit pixels; 0=clear, 1=set
/// Pixels are packed in top to bottom, left to right order with MSB of first
/// pixel word containing the top left pixel.
///  w: Width of pattern in pixels
///  h: Height of pattern in pixels
///  yOffset: Vertical offset (pixels downward from top of line) to position
///     glyph pattern properly relative to text baseline
pub const DATA: [u32; 1501] = [
    // [0]: 20 " "
    0x0004020e, 0x00000000,
    // [2]: 21 "!"
    0x00041206, 0xffffffff, 0xffff00ff, 0xff000000,
    // [6]: 22 "\""
    0x00060606, 0xcf3cf3cf, 0x30000000,
    // [9]: 23 "#"
    0x00101004, 0x30c030c0, 0x30c030c0, 0xfffcfffc, 0x0c300c30, 0x0c300c30, 0x3fff3fff, 0x030c030c,
    0x030c030c,
    // [18]: 24 "$"
    0x000a1604, 0x0c0303f0, 0xfcccf330, 0xfc3f0fc3, 0xf3f0fcfc, 0x3f0fc3f0, 0xccf333f0, 0xfc0c0300,
    // [26]: 25 "%"
    0x00121404, 0x0fcf03f3, 0xc0c30c30, 0xc30330c0, 0xcc3030f0, 0x0c3c00c0, 0x0030000c, 0x0003003c,
    0x300f0c0c, 0x33030cc0, 0xc30c30c3, 0x03c0c0f0, 0x30000000,
    // [39]: 26 "&"
    0x00101206, 0x00fc00fc, 0x03cf03cf, 0x03cf03cf, 0x03ff03ff, 0xf0fcf0fc, 0x3fcf3fcf, 0x0f0f0f0f,
    0x3fcf3fcf, 0xf0fcf0fc,
    // [49]: 27 "'"
    0x00020606, 0xfff00000,
    // [51]: 28 "("
    0x00061604, 0xc3030c3c, 0xf3cf3cf3, 0xcf3cf3cf, 0x3cf30cc3, 0x00000000,
    // [57]: 29 ")"
    0x00061604, 0x0c330cf3, 0xcf3cf3cf, 0x3cf3cf3c, 0xf3c30c0c, 0x30000000,
    // [63]: 2A "*"
    0x000a0a06, 0x0c030ccf, 0x333f0fcc, 0xcf330c03, 0x00000000,
    // [68]: 2B "+"
    0x000a0a0a, 0x0c0300c0, 0x30fffff0, 0xc0300c03, 0x00000000,
    // [73]: 2C ","
    0x00040814, 0xffffcc33,
    // [75]: 2D "-"
    0x000a020e, 0xfffff000,
    // [77]: 2E "."
    0x00040414, 0xffff0000,
    // [79]: 2F "/"
    0x000a1404, 0xc0300c03, 0x00300c03, 0x00c00c03, 0x00c03003, 0x00c0300c, 0x00c0300c, 0x03000000,
    // [87]: 30 "0"
    0x000c1206, 0x3fc3fcf0, 0xff0ff0ff, 0x0ffcffcf, 0xfffffff3, 0xff3ff0ff, 0x0ff0ff0f, 0x3fc3fc00,
    // [95]: 31 "1"
    0x00081206, 0xf0f0ffff, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f0f0f0, 0xf0f00000,
    // [101]: 32 "2"
    0x000c1206, 0x3fc3fcf0, 0x3f03f00f, 0x00f00f00, 0x3c03c00f, 0x00f003c0, 0x3cffffff, 0xffffff00,
    // [109]: 33 "3"
    0x000c1206, 0xffffff3c, 0x03c00f00, 0xf03fc3fc, 0xf00f00f0, 0x0f00f00f, 0x00f03f03, 0x3fc3fc00,
    // [117]: 34 "4"
    0x000e1206, 0x3c00f003, 0xf00fc03c, 0xc0f303c3, 0x0f0c3c0c, 0xf03fffff, 0xff3c00f0, 0x03c00f00,
    0x3c00f000,
    // [126]: 35 "5"
    0x000c1206, 0xffffff00, 0xf00f00f0, 0x0f3ff3ff, 0xf00f00f0, 0x0f00f00f, 0x00f03f03, 0x3fc3fc00,
    // [134]: 36 "6"
    0x000c1206, 0x3f03f003, 0xc03c00f0, 0x0f3ff3ff, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3fc3fc00,
    // [142]: 37 "7"
    0x000c1206, 0xfffffff0, 0x0f00f00f, 0x00f00f00, 0x3c03c00f, 0x00f00f00, 0xf00f00f0, 0x0f00f000,
    // [150]: 38 "8"
    0x000c1206, 0x3fc3fcf0, 0xff0ff0ff, 0x0f3fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3fc3fc00,
    // [158]: 39 "9"
    0x000c1206, 0x3fc3fcf0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0fff, 0xcffcf00f, 0x003c03c0, 0x0fc0fc00,
    // [166]: 3A ":"
    0x00040e0a, 0xffff0000, 0x00ffff00,
    // [169]: 3B ";"
    0x0004120a, 0xffff0000, 0x00ffffcc, 0x33000000,
    // [173]: 3C "<"
    0x000a0e08, 0xf03c03c0, 0xf00f03c0, 0x3c0f0f03, 0xc3c0f0f0, 0x3c000000,
    // [179]: 3D "="
    0x000c060c, 0xffffff00, 0x0000ffff, 0xff000000,
    // [183]: 3E ">"
    0x000a0e08, 0x03c0f0f0, 0x3c3c0f0f, 0x03c03c0f, 0x00f03c03, 0xc0f00000,
    // [189]: 3F "?"
    0x000c1206, 0x3fc3fcf0, 0x3f03f00f, 0x003c03c0, 0x0f00f00f, 0x00f00000, 0x000f00f0, 0x0f00f000,
    // [197]: 40 "@"
    0x00121008, 0x0ffc03ff, 0x030030c0, 0x0cc3f0f0, 0xfc3c30cf, 0x0c33c30c, 0xf0c333cf, 0x0cf3c300,
    0x030000c0, 0xffc03ff0,
    // [207]: 41 "A"
    0x000c1206, 0x3fc3fcf0, 0xff0ff0ff, 0x0ff0ff0f, 0xfffffff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0f00,
    // [215]: 42 "B"
    0x000c1206, 0x3ff3fff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3ff3fff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3ff3ff00,
    // [223]: 43 "C"
    0x000c1206, 0x3fc3fcc0, 0xfc0f00f0, 0x0f00f00f, 0x00f00f00, 0xf00f00f0, 0x0fc0fc0f, 0x3fc3fc00,
    // [231]: 44 "D"
    0x000c1206, 0x3ff3fff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3ff3ff00,
    // [239]: 45 "E"
    0x000a1206, 0xfffff03c, 0x0f03c0f0, 0x3c0f3fcf, 0xf03c0f03, 0xc0f03c0f, 0xfffff000,
    // [246]: 46 "F"
    0x000a1206, 0xfffff03c, 0x0f03c0f0, 0x3c0f3fcf, 0xf03c0f03, 0xc0f03c0f, 0x03c0f000,
    // [253]: 47 "G"
    0x000c1206, 0x3fc3fcc0, 0xfc0f00f0, 0x0f00f00f, 0xfcffcff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3fc3fc00,
    // [261]: 48 "H"
    0x000c1206, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xfffffff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0f00,
    // [269]: 49 "I"
    0x00081206, 0xffff3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0xffff0000,
    // [275]: 4A "J"
    0x000c1206, 0xf00f00f0, 0x0f00f00f, 0x00f00f00, 0xf00f00f0, 0xff0ff0ff, 0x0ff0ff0f, 0x3fc3fc00,
    // [283]: 4B "K"
    0x000e1206, 0xf03fc0f3, 0xc3cf0f0f, 0x3c3cf03f, 0xc0ff00fc, 0x03f03fc0, 0xff0f3c3c, 0xf3c3cf0f,
    0xf03fc0f0,
    // [292]: 4C "L"
    0x000a1206, 0x03c0f03c, 0x0f03c0f0, 0x3c0f03c0, 0xf03c0f03, 0xc0f03c0f, 0xfffff000,
    // [299]: 4D "M"
    0x00141206, 0xc0003c00, 0x03f000ff, 0x000ffc03, 0xffc03fff, 0x0ffff0ff, 0xf3ff3f3f, 0xf3f0fc3f,
    0x0fc3f030, 0x3f0303f0, 0x003f0003, 0xf0003f00, 0x03000000,
    // [312]: 4E "N"
    0x000e1206, 0xc00f003c, 0x03f00fc0, 0xff03fc3f, 0xf0ffcfcf, 0x3f3ff0ff, 0xc3fc0ff0, 0x3f00fc03,
    0xc00f0030,
    // [321]: 4F "O"
    0x000c1206, 0x3fc3fcf0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3fc3fc00,
    // [329]: 50 "P"
    0x000c1206, 0x3ff3fff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3ff3ff00, 0xf00f00f0, 0x0f00f00f, 0x00f00f00,
    // [337]: 51 "Q"
    0x000c1606, 0x3fc3fcf0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3fc3fc3c,
    0x03c0f00f, 0x00000000,
    // [347]: 52 "R"
    0x000c1206, 0x3ff3fff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3ff3fff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0f00,
    // [355]: 53 "S"
    0x000a1206, 0x3f0fcc3f, 0x0f03c0f0, 0xfc3f3f0f, 0xcfc3f0f0, 0x3c0f0fc3, 0x3f0fc000,
    // [362]: 54 "T"
    0x000c1206, 0xffffff0f, 0x00f00f00, 0xf00f00f0, 0x0f00f00f, 0x00f00f00, 0xf00f00f0, 0x0f00f000,
    // [370]: 55 "U"
    0x000c1206, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3fc3fc00,
    // [378]: 56 "V"
    0x000c1206, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0f3fc3fc, 0x0f00f000,
    // [386]: 57 "W"
    0x00141206, 0xf0f0ff0f, 0x0ff0f0ff, 0x0f0ff0f0, 0xff0f0ff0, 0xf0ff0f0f, 0xf0f0ff0f, 0x0ff0f0ff,
    0x0f0ff0f0, 0xff0f0f30, 0xf0c30f0c, 0x0f0f00f0, 0xf0000000,
    // [399]: 58 "X"
    0x000c1206, 0xf0ff0ff0, 0xff0ff0ff, 0x0f3fc3fc, 0x0f00f03f, 0xc3fcf0ff, 0x0ff0ff0f, 0xf0ff0f00,
    // [407]: 59 "Y"
    0x000c1206, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3fc3fc0f, 0x00f00f00, 0xf00f00f0, 0x0f00f000,
    // [415]: 5A "Z"
    0x000c1206, 0xfffffff0, 0x0f00f00f, 0x003c03c0, 0x0f00f003, 0xc03c00f0, 0x0f00f00f, 0xffffff00,
    // [423]: 5B "["
    0x00061604, 0xfff3cf3c, 0xf3cf3cf3, 0xcf3cf3cf, 0x3cf3cfff, 0xf0000000,
    // [429]: 5C "\\"
    0x000a1404, 0x00c0300c, 0x030300c0, 0x300c0c03, 0x00c03030, 0x0c0300c0, 0xc0300c03, 0x00000000,
    // [437]: 5D "]"
    0x00061604, 0xffff3cf3, 0xcf3cf3cf, 0x3cf3cf3c, 0xf3cf3cff, 0xf0000000,
    // [443]: 5E "^"
    0x000a0606, 0x0c030330, 0xccc0f030,
    // [446]: 5F "_"
    0x00100216, 0xffffffff,
    // [448]: 60 "`"
    0x00060604, 0x0c330cc3, 0x00000000,
    // [451]: 61 "a"
    0x000c0e0a, 0x3fc3fcf0, 0x3f03ffcf, 0xfcf0ff0f, 0xf0ff0ff0, 0xff0fffcf, 0xfc000000,
    // [458]: 62 "b"
    0x000c1206, 0x00f00f00, 0xf00f3ff3, 0xfff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3ff3ff00,
    // [466]: 63 "c"
    0x000a0e0a, 0x3f0fcc3f, 0x0f03c0f0, 0x3c0f03c0, 0xfc3f0f3f, 0x0fc00000,
    // [472]: 64 "d"
    0x000c1206, 0xf00f00f0, 0x0f00ffcf, 0xfcf0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xffcffc00,
    // [480]: 65 "e"
    0x000c0e0a, 0x3fc3fcf0, 0xff0ff0ff, 0x0fffffff, 0x00f00fc0, 0xfc0f3fc3, 0xfc000000,
    // [487]: 66 "f"
    0x000a1206, 0xfc3f00f0, 0x3c3fcff0, 0xf03c0f03, 0xc0f03c0f, 0x03c0f03c, 0x0f03c000,
    // [494]: 67 "g"
    0x000c140a, 0xffcffcf0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0fffcf, 0xfcf00f00, 0xf03f033f,
    0xc3fc0000,
    // [503]: 68 "h"
    0x000c1206, 0x00f00f00, 0xf00f3ff3, 0xfff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0f00,
    // [511]: 69 "i"
    0x00041206, 0xff00ffff, 0xffffffff, 0xff000000,
    // [515]: 6A "j"
    0x000a1806, 0xf03c0000, 0x00f03c0f, 0x03c0f03c, 0x0f03c0f0, 0x3c0f03c0, 0xf03c0f03, 0xc0f0fc33,
    0xf0fc0000,
    // [524]: 6B "k"
    0x000c1206, 0x00f00f00, 0xf00ff0ff, 0x0f3cf3cf, 0x0ff0ff03, 0xf03f0ff0, 0xff3cf3cf, 0xf0ff0f00,
    // [532]: 6C "l"
    0x00041206, 0xffffffff, 0xffffffff, 0xff000000,
    // [536]: 6D "m"
    0x00140e0a, 0x3ffff3ff, 0xfff0f0ff, 0x0f0ff0f0, 0xff0f0ff0, 0xf0ff0f0f, 0xf0f0ff0f, 0x0ff0f0ff,
    0x0f0ff0f0, 0xff0f0f00,
    // [546]: 6E "n"
    0x000c0e0a, 0x3ff3fff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0f000000,
    // [553]: 6F "o"
    0x000c0e0a, 0x3fc3fcf0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0f3fc3, 0xfc000000,
    // [560]: 70 "p"
    0x000c120a, 0x3ff3fff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0f3ff3, 0xff00f00f, 0x00f00f00,
    // [568]: 71 "q"
    0x000c120a, 0xffcffcf0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0fffcf, 0xfcf00f00, 0xf00f0000,
    // [576]: 72 "r"
    0x000a0e0a, 0xf3fcf0fc, 0x3f03c0f0, 0x3c0f03c0, 0xf03c0f03, 0xc0f00000,
    // [582]: 73 "s"
    0x000a0e0a, 0x3f0fcc3f, 0x0f0fc3f3, 0xf0fcfc3f, 0x0f0fc33f, 0x0fc00000,
    // [588]: 74 "t"
    0x00081206, 0x3c3c3c3c, 0xffff3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0xf0f00000,
    // [594]: 75 "u"
    0x000c0e0a, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ffc, 0xffcff3cf, 0x3c000000,
    // [601]: 76 "v"
    0x000c0e0a, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0f3f, 0xc3fc0f00, 0xf0000000,
    // [608]: 77 "w"
    0x00140e0a, 0xf0f0ff0f, 0x0ff0f0ff, 0x0f0ff0f0, 0xff0f0ff0, 0xf0ff0f0f, 0xf0f0ff0f, 0x0f30f0c3,
    0x0f0c0f0f, 0x00f0f000,
    // [618]: 78 "x"
    0x000c0e0a, 0xf0ff0ff0, 0xff0f3fc3, 0xfc0f00f0, 0x3fc3fcf0, 0xff0ff0ff, 0x0f000000,
    // [625]: 79 "y"
    0x000c140a, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0fffcf, 0xfcf00f00, 0xf03f033f,
    0xc3fc0000,
    // [634]: 7A "z"
    0x000c0e0a, 0xfffffff0, 0x0f003c03, 0xc00f00f0, 0x03c03c00, 0xf00fffff, 0xff000000,
    // [641]: 7B "{"
    0x00061604, 0xc3030c30, 0xc30c30c0, 0xc330c30c, 0x30c30cc3, 0x00000000,
    // [647]: 7C "|"
    0x00021604, 0xffffffff, 0xfff00000,
    // [650]: 7D "}"
    0x00061604, 0x0c330c30, 0xc30c30cc, 0x3030c30c, 0x30c30c0c, 0x30000000,
    // [656]: 7E "~"
    0x000c040a, 0xc3cc3c3c, 0x33c30000,
    // [659]: A0 "\u00A0" No-Break Space
    0x0004020e, 0x00000000,
    // [661]: A1 "¡"
    0x00041206, 0xffff00ff, 0xffffffff, 0xff000000,
    // [665]: A2 "¢"
    0x000a1004, 0x0c0303f0, 0xfcccf330, 0xcc330cc3, 0x3ccf333f, 0x0fc0c030,
    // [671]: A3 "£"
    0x000e1206, 0x0fc03f03, 0x0f0c3c00, 0xf003c00f, 0x003c03fc, 0x0ff00f00, 0x3c00f003, 0xcc0f303c,
    0x3ffcfff0,
    // [680]: A4 "¤"
    0x000e0e08, 0x400bbf77, 0xff8e1c70, 0x39806601, 0x98066019, 0xc0e3871f, 0xfeefdd00, 0x20000000,
    // [688]: A5 "¥"
    0x00101206, 0xf00ff00f, 0x3c3c3c3c, 0xffffffff, 0x03c003c0, 0xffffffff, 0x03c003c0, 0x03c003c0,
    0x03c003c0, 0x03c003c0,
    // [698]: A6 "¦"
    0x00021604, 0xfffff0ff, 0xfff00000,
    // [701]: A7 "§"
    0x000a1804, 0x3f0fcc0f, 0x0303c0f0, 0xf03c3ccf, 0x3f0fc3c3, 0xf0fcf33c, 0x3c0f0f03, 0xc0c0f033,
    0xf0fc0000,
    // [710]: A8 "¨"
    0x00080206, 0xc3c30000,
    // [712]: A9 "©"
    0x00101206, 0x0ff00ff0, 0x300c300c, 0xc3c3c3c3, 0xcc33cc33, 0xc033c033, 0xcc33cc33, 0xc3c3c3c3,
    0x300c300c, 0x0ff00ff0,
    // [722]: AA "ª"
    0x000a1006, 0x3f0fcf0f, 0xc3ff3fcf, 0x3fcff3fc, 0xfff3fc00, 0x000fffff,
    // [728]: AB "«"
    0x000e0e0a, 0xc3030c03, 0x0c0c300c, 0x3030c030, 0xc0c30c30, 0x30c30c0c, 0x30c3030c, 0x00000000,
    // [736]: AC "¬"
    0x000a060e, 0xfffffc03, 0x00c03000,
    // [739]: AD "\u00AD" Soft Hyphen
    0x000a020e, 0xfffff000,
    // [741]: AE "®"
    0x00101206, 0x0ff00ff0, 0x300c300c, 0xc3f3c3f3, 0xcc33cc33, 0xc3f3c3f3, 0xcc33cc33, 0xcc33cc33,
    0x300c300c, 0x0ff00ff0,
    // [751]: AF "¯"
    0x00080204, 0xffff0000,
    // [753]: B0 "°"
    0x00080806, 0x3c3cc3c3, 0xc3c33c3c,
    // [756]: B1 "±"
    0x000a0e0a, 0x0c0300c0, 0x30fffff0, 0xc0300c03, 0x000000ff, 0xfff00000,
    // [762]: B2 "²"
    0x00060a02, 0xfffc30ff, 0xf0c3fff0,
    // [765]: B3 "³"
    0x00060a02, 0xfffc30ff, 0xfc30fff0,
    // [768]: B4 "´"
    0x00060606, 0xc3030c0c, 0x30000000,
    // [771]: B5 "µ"
    0x0010120a, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0xcffccffc,
    0x000c000c, 0x00030003,
    // [781]: B6 "¶"
    0x000e1206, 0xfff3ffcc, 0xc3f30fcc, 0x3f30fcc3, 0xf30fcff3, 0x3fccc033, 0x00cc0330, 0x0cc03300,
    0xcc033000,
    // [790]: B7 "·"
    0x0004040e, 0xffff0000,
    // [792]: B8 "¸"
    0x00040618, 0xffcc3300,
    // [794]: B9 "¹"
    0x00060a02, 0x30c3cf30, 0xc30cfff0,
    // [797]: BA "º"
    0x000a1006, 0x3f0fcf3f, 0xcff3fcff, 0x3fcff3fc, 0xf3f0fc00, 0x000fffff,
    // [803]: BB "»"
    0x000e0e0a, 0x030c0c30, 0xc3030c30, 0xc0c30c30, 0x30c030c0, 0xc300c303, 0x0c030c0c, 0x30000000,
    // [811]: BC "¼"
    0x00121402, 0x0c030300, 0xc0c03c30, 0x0f030300, 0xc0c03030, 0x0c0c00cf, 0xc033fccc, 0x033300cc,
    0x30330c0f, 0xc303f0c0, 0xc00c3003, 0x0c00c300, 0x30000000,
    // [824]: BD "½"
    0x00121402, 0x0c030300, 0xc0c03c30, 0x0f030300, 0xc0c03030, 0x0c0c00cf, 0xc033ffcc, 0x03f300c0,
    0x30300c0f, 0xc303f0c0, 0x0c0c0303, 0x0fc0c3f0, 0x30000000,
    // [837]: BE "¾"
    0x00121402, 0x0c0fc303, 0xf0c0c030, 0x30030fc0, 0xc3f030c0, 0x0c3000cf, 0xc033fccc, 0x033300cc,
    0x30330c0f, 0xc303f0c0, 0xc00c3003, 0x0c00c300, 0x30000000,
    // [850]: BF "¿"
    0x000c1206, 0x0f00f00f, 0x00f00000, 0x000f00f0, 0x0f00f003, 0xc03c00f0, 0x0fc0fc0f, 0x3fc3fc00,
    // [858]: C0 "À"
    0x000c1800, 0x0300300c, 0x00c00000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0fffffff, 0xf0ff0ff0,
    0xff0ff0ff, 0x0ff0ff0f,
    // [868]: C1 "Á"
    0x000c1800, 0x0c00c003, 0x00300000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0fffffff, 0xf0ff0ff0,
    0xff0ff0ff, 0x0ff0ff0f,
    // [878]: C2 "Â"
    0x000c1800, 0x0f00f030, 0xc30c0000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0fffffff, 0xf0ff0ff0,
    0xff0ff0ff, 0x0ff0ff0f,
    // [888]: C3 "Ã"
    0x000c1800, 0xc3cc3c3c, 0x33c30000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0fffffff, 0xf0ff0ff0,
    0xff0ff0ff, 0x0ff0ff0f,
    // [898]: C4 "Ä"
    0x000c1602, 0x30c30c00, 0x00003fc3, 0xfcf0ff0f, 0xf0ff0ff0, 0xff0fffff, 0xfff0ff0f, 0xf0ff0ff0,
    0xff0ff0ff, 0x0f000000,
    // [908]: C5 "Å"
    0x000c1800, 0x0f00f030, 0xc30c30c3, 0x0c3fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0fffffff, 0xf0ff0ff0,
    0xff0ff0ff, 0x0ff0ff0f,
    // [918]: C6 "Æ"
    0x00121206, 0xffff3fff, 0xc03c3c0f, 0x0f03c3c0, 0xf0f03c3c, 0x0f0f3fff, 0xcffff03c, 0x3c0f0f03,
    0xc3c0f0f0, 0x3c3c0f0f, 0xffc3fff0, 0xf0000000,
    // [930]: C7 "Ç"
    0x000c1806, 0x3fc3fcc0, 0xfc0f00f0, 0x0f00f00f, 0x00f00f00, 0xf00f00f0, 0x0fc0fc0f, 0x3fc3fc0f,
    0x00f00c00, 0xc0030030,
    // [940]: C8 "È"
    0x000a1800, 0x0300c0c0, 0x3000000f, 0xffff03c0, 0xf03c0f03, 0xc0f3fcff, 0x03c0f03c, 0x0f03c0ff,
    0xffff0000,
    // [949]: C9 "É"
    0x000a1800, 0x300c00c0, 0x3000000f, 0xffff03c0, 0xf03c0f03, 0xc0f3fcff, 0x03c0f03c, 0x0f03c0ff,
    0xffff0000,
    // [958]: CA "Ê"
    0x000a1800, 0x0f03c30c, 0xc300000f, 0xffff03c0, 0xf03c0f03, 0xc0f3fcff, 0x03c0f03c, 0x0f03c0ff,
    0xffff0000,
    // [967]: CB "Ë"
    0x000a1602, 0x330cc000, 0x00fffff0, 0x3c0f03c0, 0xf03c0f3f, 0xcff03c0f, 0x03c0f03c, 0x0ffffff0,
    // [975]: CC "Ì"
    0x00041800, 0x33cc00ff, 0xffffffff, 0xffffffff,
    // [979]: CD "Í"
    0x00041800, 0xcc3300ff, 0xffffffff, 0xffffffff,
    // [983]: CE "Î"
    0x00081800, 0x3c3cc3c3, 0x00003c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c,
    // [990]: CF "Ï"
    0x00081602, 0xc3c30000, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c0000,
    // [997]: D0 "Ð"
    0x000e1206, 0x3ff0ffcf, 0x0f3c3cf0, 0xf3c3cf0f, 0x3c3cf3ff, 0xcfff0f3c, 0x3cf0f3c3, 0xcf0f3c3c,
    0x3ff0ffc0,
    // [1006]: D1 "Ñ"
    0x000e1800, 0x30f0c3c0, 0xf0c3c300, 0x00000c00, 0xf003c03f, 0x00fc0ff0, 0x3fc3ff0f, 0xfcfcf3f3,
    0xff0ffc3f, 0xc0ff03f0, 0x0fc03c00, 0xf0030000,
    // [1018]: D2 "Ò"
    0x000c1800, 0x0300300c, 0x00c00000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0ff0ff, 0x0f3fc3fc,
    // [1028]: D3 "Ó"
    0x000c1800, 0x0c00c003, 0x00300000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0ff0ff, 0x0f3fc3fc,
    // [1038]: D4 "Ô"
    0x000c1800, 0x0f00f030, 0xc30c0000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0ff0ff, 0x0f3fc3fc,
    // [1048]: D5 "Õ"
    0x000c1800, 0xc3cc3c3c, 0x33c30000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0ff0ff, 0x0f3fc3fc,
    // [1058]: D6 "Ö"
    0x000c1602, 0x30c30c00, 0x00003fc3, 0xfcf0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0f3fc3, 0xfc000000,
    // [1068]: D7 "×"
    0x000a0a0e, 0xc0f03330, 0xcc0c0303, 0x30ccc0f0, 0x30000000,
    // [1073]: D8 "Ø"
    0x00121206, 0xcff033fc, 0x03c3c0f0, 0xf03c3c0f, 0x0f03f3c0, 0xfcf03cfc, 0x0f3f03c3, 0xc0f0f03c,
    0x3c0f0f03, 0xc3f0f0fc, 0x0ff0c3fc, 0x30000000,
    // [1085]: D9 "Ù"
    0x000c1800, 0x0300300c, 0x00c00000, 0x00f0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0ff0ff, 0x0f3fc3fc,
    // [1095]: DA "Ú"
    0x000c1800, 0x0c00c003, 0x00300000, 0x00f0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0ff0ff, 0x0f3fc3fc,
    // [1105]: DB "Û"
    0x000c1800, 0x0f00f030, 0xc30c0000, 0x00f0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0ff0ff, 0x0f3fc3fc,
    // [1115]: DC "Ü"
    0x000c1602, 0x30c30c00, 0x0000f0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0f3fc3, 0xfc000000,
    // [1125]: DD "Ý"
    0x000c1800, 0x0c00c003, 0x00300000, 0x00f0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0f3fc3fc, 0x0f00f00f,
    0x00f00f00, 0xf00f00f0,
    // [1135]: DE "Þ"
    0x000e1206, 0x03fc0ff0, 0x0f003c3f, 0xf0ffcf0f, 0x3c3cf0f3, 0xc3cf0f3c, 0x3c3ff0ff, 0xc00f003c,
    0x03fc0ff0,
    // [1144]: DF "ß"
    0x000e1206, 0x0ff03fc3, 0xc3cf0f3c, 0x3cf0f0f3, 0xc3cf3c3c, 0xf0ff03fc, 0x0ff03fc0, 0xff03fc0f,
    0x3f3cfcf0,
    // [1153]: E0 "à"
    0x000c1404, 0x0300300c, 0x00c00000, 0x003fc3fc, 0xf03f03ff, 0xcffcf0ff, 0x0ff0ff0f, 0xf0ff0fff,
    0xcffc0000,
    // [1162]: E1 "á"
    0x000c1404, 0x0c00c003, 0x00300000, 0x003fc3fc, 0xf03f03ff, 0xcffcf0ff, 0x0ff0ff0f, 0xf0ff0fff,
    0xcffc0000,
    // [1171]: E2 "â"
    0x000c1404, 0x0f00f030, 0xc30c0000, 0x003fc3fc, 0xf03f03ff, 0xcffcf0ff, 0x0ff0ff0f, 0xf0ff0fff,
    0xcffc0000,
    // [1180]: E3 "ã"
    0x000c1404, 0xc3cc3c3c, 0x33c30000, 0x003fc3fc, 0xf03f03ff, 0xcffcf0ff, 0x0ff0ff0f, 0xf0ff0fff,
    0xcffc0000,
    // [1189]: E4 "ä"
    0x000c1206, 0x30c30c00, 0x00003fc3, 0xfcf03f03, 0xffcffcf0, 0xff0ff0ff, 0x0ff0ff0f, 0xffcffc00,
    // [1197]: E5 "å"
    0x000c1800, 0x0f00f030, 0xc30c30c3, 0x0c0f00f0, 0x0000003f, 0xc3fcf03f, 0x03ffcffc, 0xf0ff0ff0,
    0xff0ff0ff, 0x0fffcffc,
    // [1207]: E6 "æ"
    0x00140e0a, 0x3fffc3ff, 0xfcf0f03f, 0x0f03f0ff, 0xcf0ffcff, 0xf0ffff0f, 0x00f0f00f, 0x0fc0f0fc,
    0x0f0f3fff, 0xc3fffc00,
    // [1217]: E7 "ç"
    0x000c140a, 0x3fc3fcc0, 0xfc0f00f0, 0x0f00f00f, 0x00f00fc0, 0xfc0f3fc3, 0xfc0f00f0, 0x0c00c003,
    0x00300000,
    // [1226]: E8 "è"
    0x000c1404, 0x0300300c, 0x00c00000, 0x003fc3fc, 0xf0ff0ff0, 0xff0fffff, 0xff00f00f, 0xc0fc0f3f,
    0xc3fc0000,
    // [1235]: E9 "é"
    0x000c1404, 0x0c00c003, 0x00300000, 0x003fc3fc, 0xf0ff0ff0, 0xff0fffff, 0xff00f00f, 0xc0fc0f3f,
    0xc3fc0000,
    // [1244]: EA "ê"
    0x000c1404, 0x0f00f030, 0xc30c0000, 0x003fc3fc, 0xf0ff0ff0, 0xff0fffff, 0xff00f00f, 0xc0fc0f3f,
    0xc3fc0000,
    // [1253]: EB "ë"
    0x000c1206, 0x30c30c00, 0x00003fc3, 0xfcf0ff0f, 0xf0ff0fff, 0xffff00f0, 0x0fc0fc0f, 0x3fc3fc00,
    // [1261]: EC "ì"
    0x00041404, 0x33cc00ff, 0xffffffff, 0xffff0000,
    // [1265]: ED "í"
    0x00041404, 0xcc3300ff, 0xffffffff, 0xffff0000,
    // [1269]: EE "î"
    0x00081404, 0x3c3cc3c3, 0x00003c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c,
    // [1275]: EF "ï"
    0x00081206, 0xc3c30000, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c3c3c, 0x3c3c0000,
    // [1281]: F0 "ð"
    0x000c1206, 0x03f73f3f, 0x00fc3ce3, 0xc0ff0ff0, 0xf3cf3cf0, 0xff0ff0ff, 0x0f30f30f, 0x0fc0fc00,
    // [1289]: F1 "ñ"
    0x000c1404, 0xc3cc3c3c, 0x33c30000, 0x003ff3ff, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0ff0,
    0xff0f0000,
    // [1298]: F2 "ò"
    0x000c1404, 0x0300300c, 0x00c00000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0f3f,
    0xc3fc0000,
    // [1307]: F3 "ó"
    0x000c1404, 0x0c00c003, 0x00300000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0f3f,
    0xc3fc0000,
    // [1316]: F4 "ô"
    0x000c1404, 0x0f00f030, 0xc30c0000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0f3f,
    0xc3fc0000,
    // [1325]: F5 "õ"
    0x000c1404, 0xc3cc3c3c, 0x33c30000, 0x003fc3fc, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0f3f,
    0xc3fc0000,
    // [1334]: F6 "ö"
    0x000c1206, 0x30c30c00, 0x00003fc3, 0xfcf0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3fc3fc00,
    // [1342]: F7 "÷"
    0x000a0a0a, 0x0c030000, 0x00fffff0, 0x00000c03, 0x00000000,
    // [1347]: F8 "ø"
    0x00100e0a, 0xcff0cff0, 0x3c3c3c3c, 0x3c3c3c3c, 0x3f3c3f3c, 0x3cfc3cfc, 0x3c3c3c3c, 0x0ff30ff3,
    // [1355]: F9 "ù"
    0x000c1404, 0x0300300c, 0x00c00000, 0x00f0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xfcffcff3,
    0xcf3c0000,
    // [1364]: FA "ú"
    0x000c1404, 0x0c00c003, 0x00300000, 0x00f0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xfcffcff3,
    0xcf3c0000,
    // [1373]: FB "û"
    0x000c1404, 0x0f00f030, 0xc30c0000, 0x00f0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xfcffcff3,
    0xcf3c0000,
    // [1382]: FC "ü"
    0x000c1206, 0x30c30c00, 0x0000f0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ffcffcf, 0xf3cf3c00,
    // [1390]: FD "ý"
    0x000c1a04, 0x0c00c003, 0x00300000, 0x00f0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xf0ff0fff,
    0xcffcf00f, 0x00f03f03, 0x3fc3fc00,
    // [1401]: FE "þ"
    0x000c1606, 0x00f00f00, 0xf00f3ff3, 0xfff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0x3ff3ff00,
    0xf00f00f0, 0x0f000000,
    // [1411]: FF "ÿ"
    0x000c1806, 0x30c30c00, 0x0000f0ff, 0x0ff0ff0f, 0xf0ff0ff0, 0xff0ff0ff, 0x0ff0ff0f, 0xffcffcf0,
    0x0f00f03f, 0x033fc3fc,
    // [1421]: 152 "Œ"
    0x00121206, 0xffff3fff, 0xc03c3c0f, 0x0f03c3c0, 0xf0f03c3c, 0x0f0f3fc3, 0xcff0f03c, 0x3c0f0f03,
    0xc3c0f0f0, 0x3c3c0f0f, 0xffff3fff, 0xc0000000,
    // [1433]: 153 "œ"
    0x00140e0a, 0x3fffc3ff, 0xfcf0f0ff, 0x0f0ff0f0, 0xff0f0fff, 0xf0ffff0f, 0x00f0f00f, 0x0fc0f0fc,
    0x0f0f3fff, 0xc3fffc00,
    // [1443]: 2018 "‘"
    0x00040806, 0xcc33ffff,
    // [1445]: 2019 "’"
    0x00040806, 0xffffcc33,
    // [1447]: 201A "‚"
    0x00040814, 0xffffcc33,
    // [1449]: 201B "‛"
    0x00040806, 0xffff33cc,
    // [1451]: 201C "“"
    0x000a0806, 0xc330c30c, 0xc3f3fcff, 0x3fcf0000,
    // [1455]: 201D "”"
    0x000a0806, 0xf3fcff3f, 0xcfc330c3, 0x0cc30000,
    // [1459]: 201E "„"
    0x000a0814, 0xf3fcff3f, 0xcfc330c3, 0x0cc30000,
    // [1463]: 201F "‟"
    0x000a0806, 0xf3fcff3f, 0xcf30cc3c, 0x330c0000,
    // [1467]: 2020 "†"
    0x00060a06, 0x30cfff30, 0xc30c30c0,
    // [1470]: 2021 "‡"
    0x00060c06, 0x30cfff30, 0xc30cfff3, 0x0c000000,
    // [1474]: 2022 "•"
    0x000a0a0a, 0x3f0fcfff, 0xffffffff, 0xffff3f0f, 0xc0000000,
    // [1479]: 20AC "€"
    0x00101008, 0x3fc03fc0, 0xc030c030, 0x000c000c, 0x3fff3fff, 0x000c000c, 0x0fff0fff, 0xc030c030,
    0x3fc03fc0,
    // [1488]: FFFD "�"
    0x00121404, 0x00c00030, 0x003f000f, 0xc00f3c03, 0xcf03ccf0, 0xf33cfcff, 0xff3ffff3, 0xfffcff3f,
    0xff0fffc0, 0xf3c03cf0, 0x03f000fc, 0x000c0003, 0x00000000,
];

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    // If this fails, there's probably a hash collision, so change the seed.
    fn test_hashes_unique_and_sorted() {
        for i in 0..HASH_BASIC_LATIN.len()-1 {
            assert!(HASH_BASIC_LATIN[i] < HASH_BASIC_LATIN[i+1]);
        }
        for i in 0..HASH_LATIN_1_SUPPLEMENT.len()-1 {
            assert!(HASH_LATIN_1_SUPPLEMENT[i] < HASH_LATIN_1_SUPPLEMENT[i+1]);
        }
        for i in 0..HASH_LATIN_EXTENDED_A.len()-1 {
            assert!(HASH_LATIN_EXTENDED_A[i] < HASH_LATIN_EXTENDED_A[i+1]);
        }
        for i in 0..HASH_GENERAL_PUNCTUATION.len()-1 {
            assert!(HASH_GENERAL_PUNCTUATION[i] < HASH_GENERAL_PUNCTUATION[i+1]);
        }
        for i in 0..HASH_CURRENCY_SYMBOLS.len()-1 {
            assert!(HASH_CURRENCY_SYMBOLS[i] < HASH_CURRENCY_SYMBOLS[i+1]);
        }
        for i in 0..HASH_SPECIALS.len()-1 {
            assert!(HASH_SPECIALS[i] < HASH_SPECIALS[i+1]);
        }
    }
}
